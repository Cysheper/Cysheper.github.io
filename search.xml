<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>预处理</title>
      <link href="/2025/05/13/ji-chu-suan-fa/"/>
      <url>/2025/05/13/ji-chu-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><p>预处理，即在正式处理数据之前的操作，通常目的是优化时间、空间复杂度。</p><p>前置知识：</p><ul><li>C++基础语法</li></ul><p>本节目录：</p><ul><li><p>前缀和与差分</p></li><li><p>倍增</p></li><li><p>离散化</p></li></ul><h2 id="前缀和与差分"><a href="#前缀和与差分" class="headerlink" title="前缀和与差分"></a>前缀和与差分</h2><h3 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h3><p>我们先看例题：<a href="https://www.luogu.com.cn/problem/B3612">洛谷B3612 求区间和</a></p><p>简而言之，给你一个长度为$n$的正整数数组 $a_1​,a_2​,⋯,a_n​$，有$m$次询问，每次询问给出一对区间$[ l_i, r_i ]$，分别求这 $m$ 个区间的区间和。</p><p>如果你不会前缀和算法，你可能会这样写……</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 正整数数组</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span> cin <span class="token operator">>></span> n<span class="token punctuation">;</span> <span class="token comment">// 输入n</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> cin <span class="token operator">>></span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 输入数据</span><span class="token keyword">int</span> m<span class="token punctuation">;</span> cin <span class="token operator">>></span> m<span class="token punctuation">;</span> <span class="token comment">// 输入 m</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 存结果</span>cin <span class="token operator">>></span> l <span class="token operator">>></span> r<span class="token punctuation">;</span> <span class="token comment">// 输入l, r</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> l<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> <span class="token operator">++</span> j<span class="token punctuation">)</span> <span class="token comment">// 从l到r累加数组数据</span>ans <span class="token operator">+=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 输出ans</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是一提交，结果却……<br><img src="https://i.postimg.cc/RVGFP1v3/image.png"><br>TLE。 。 。<br>为什么会超时呢？我们研究一下时间复杂度。</p><p>按照最坏情况，$n &#x3D; 10^5$，区间可能的最大范围是整个数组，也就是$[0, 10^5]$，内外层循环都是$n$次，所以$O(n^2)$的复杂度，循环次数为$10^{10}$，题目时间限制为$1s$，肯定会超时（只要出题人想卡你，显然这道题卡了）。（具体时间复杂度计算和运行时间，看我这篇博客：pass）</p><p>我们想一想，如果询问次数过多，可能会有重叠的区间被重复计算，也就造成，同一段数，不断被求和，导致性能的浪费。有没有一种方法，可以使每一个数只被计算一次，之后只需直接使用即可呢？</p><p>有的，那就是前缀和！</p><p>如果我们开辟一个额外的数组，前缀和数组（prefix，当然你取什么变量都行，只是为了显而易见得知道这个数组的作用），用来存储，原数组前$i$项的和，就是:</p><p>$$prefix[k] &#x3D; \sum_{i&#x3D;1}^k arr[i], (k &#x3D; 1,2,…,n)$$</p><p>说人话就是：<br>$$prefix[k] &#x3D; arr[1] + arr[2] + … + arr[k], (k &#x3D; 1,2,…,n)$$</p><p>如果原数组$arr &#x3D; [1, 2, 3, 4, 5]$<br>则：<br>$prefix[0] &#x3D; 0$<br>$prefix[1] &#x3D; arr[1] &#x3D; 1$<br>$prefix[2] &#x3D; arr[1] + arr[2] &#x3D; 3$<br>$prefix[3] &#x3D; arr[1] + arr[2] + arr[3] &#x3D; 6$<br>$prefix[4] &#x3D; arr[1] + arr[2] + arr[3] + arr[4] &#x3D; 10$<br>$prefix[5] &#x3D; arr[1] + arr[2] + arr[3] + arr[4] + arr[5]&#x3D; 15$</p><p>观察可以得到：<br>$prefix[1] &#x3D; prefix[0] + arr[1]$<br>$prefix[2] &#x3D; prefix[1] + arr[2]$<br>$prefix[3] &#x3D; prefix[2] + arr[3]$<br>$prefix[4] &#x3D; prefix[3] + arr[4]$<br>$prefix[5] &#x3D; prefix[4] + arr[5]$</p><p>预处理每项$prefix$：<br>对于每个$prefix[k]$，有递推式：<br>$$\boxed{prefix[k] &#x3D; prefix[k - 1] + arr[k], (k &#x3D; 1,2,…,n)}$$</p><p>注意到(<del>注意力惊人</del>)，对于任意的$[l, r]$区间和就是：<br>$$\boxed{\sum_{i&#x3D;l}^r arr[i] &#x3D; prefix[r] - prefix[l - 1]}$$</p><p>有了这两个式子，代码就很好写了：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span>  <span class="token keyword">namespace</span>  std<span class="token punctuation">;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 数组</span><span class="token keyword">int</span> prefix<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 前缀和数组</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span> cin <span class="token operator">>></span> n<span class="token punctuation">;</span>  <span class="token comment">// 输入n</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 因为后面要i-1，所以从1开始，避免数组越界</span>        cin <span class="token operator">>></span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 输入数据</span>        prefix<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> prefix<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 预处理前缀和数组</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> m<span class="token punctuation">;</span> cin <span class="token operator">>></span> m<span class="token punctuation">;</span>  <span class="token comment">// 输入 m</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>             <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> l <span class="token operator">>></span> r<span class="token punctuation">;</span> <span class="token comment">// 输入l, r</span>        cout <span class="token operator">&lt;&lt;</span> prefix<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> prefix<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 直接计算得出答案</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就愉快的AC啦！</p><p>时间复杂度$O(n)$（没有循环嵌套），空间复杂度也是$O(n)$.<br>因为$arr$数组之后不会再用到，所以可以再优化空间：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span>  <span class="token keyword">namespace</span>  std<span class="token punctuation">;</span><span class="token comment">// int arr[100005]; 直接不需要原数组</span><span class="token keyword">int</span> prefix<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 前缀和数组</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span> cin <span class="token operator">>></span> n<span class="token punctuation">;</span>  <span class="token comment">// 输入n</span><span class="token keyword">int</span> num<span class="token punctuation">;</span> <span class="token comment">// 临时变量num</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> num<span class="token punctuation">;</span>        prefix<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> prefix<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> num<span class="token punctuation">;</span> <span class="token comment">//预处理前缀和数组</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> m<span class="token punctuation">;</span> cin <span class="token operator">>></span> m<span class="token punctuation">;</span>  <span class="token comment">// 输入 m</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>             <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> l <span class="token operator">>></span> r<span class="token punctuation">;</span> <span class="token comment">// 输入l, r</span>        cout <span class="token operator">&lt;&lt;</span> prefix<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> prefix<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 直接计算得出答案</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 基础知识 </tag>
            
            <tag> 预处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制与位运算</title>
      <link href="/2025/05/09/bin/"/>
      <url>/2025/05/09/bin/</url>
      
        <content type="html"><![CDATA[<h2 id="（一）进制转化"><a href="#（一）进制转化" class="headerlink" title="（一）进制转化"></a>（一）进制转化</h2><h3 id="（1）任意进制转化为十进制"><a href="#（1）任意进制转化为十进制" class="headerlink" title="（1）任意进制转化为十进制"></a>（1）任意进制转化为十进制</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 二进制转十进制</span>string num <span class="token operator">=</span> <span class="token string">"10010"</span><span class="token punctuation">;</span> <span class="token comment">// 需要转化的二进制数</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">stoi</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2就是num的进制，ans 就是答案，ans = 18 = num</span><span class="token comment">// 十六进制转十进制</span>num <span class="token operator">=</span> <span class="token string">"14A"</span><span class="token punctuation">;</span>ans <span class="token operator">=</span> <span class="token function">stoi</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ans = 330 = num</span><span class="token comment">// 其他进制同理</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（2）十进制转化为任意进制（2-9进制）"><a href="#（2）十进制转化为任意进制（2-9进制）" class="headerlink" title="（2）十进制转化为任意进制（2~9进制）"></a>（2）十进制转化为任意进制（2~9进制）</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string <span class="token function">calc</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 将十进制数num，转化为x进制数</span>    string ans <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment">// 记录结果</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 只要num不为0</span>        ans <span class="token operator">+=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>num <span class="token operator">%</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 记录余数</span>        num <span class="token operator">/=</span> x<span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 反转ans字符串</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>  <span class="token comment">// 返回结果字符串</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 将10转化为2,8,6进制</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">calc</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：1010 </span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">calc</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：12</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">calc</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>将 <code>num</code> 不断模 <code>x</code> 的结果放入答案， 同时 <code>num</code> 不断除 <code>x</code>, 只要 <code>num</code> 不为 <code>0</code>。结果反转就是答案。证明略。  </p><h2 id="（二）位运算"><a href="#（二）位运算" class="headerlink" title="（二）位运算"></a>（二）位运算</h2><h3 id="（1）-（按位与）"><a href="#（1）-（按位与）" class="headerlink" title="（1）&amp;（按位与）"></a>（1）&amp;（按位与）</h3><h4 id="1、规则"><a href="#1、规则" class="headerlink" title="1、规则"></a>1、规则</h4><p>二进制相应位都为<code>1</code>则为<code>1</code>，否则为<code>0</code></p><p><strong>例如：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">111010</span>  <span class="token comment">// 58</span><span class="token number">100100</span>  <span class="token comment">// 36</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>  <span class="token comment">// &amp; （按位与）</span><span class="token number">100000</span>  <span class="token comment">// 32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、判断奇偶"><a href="#2、判断奇偶" class="headerlink" title="2、判断奇偶"></a><strong>2、判断奇偶</strong></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"n为奇数"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"n为偶数"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>n &amp; 1</code> 若为真， <code>n</code> 的二进制位最低位为 <code>1</code>， 就是奇数，否则为偶数</p><h4 id="3、取出最后一位的-1"><a href="#3、取出最后一位的-1" class="headerlink" title="3、取出最后一位的 1"></a><strong>3、取出最后一位的 <code>1</code></strong></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">lowbits</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 返回x最后一位1对应的数</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>$10_{10}$ 的二进制为 $1010_2$ （下表为2表示二进制数）<br>$lowbits(10_{10}) &#x3D; 10_2 &#x3D; 2_{10}$<br>所以 $lowbits(10) &#x3D; 2$</p><h4 id="4、判断一个数是否为2的幂"><a href="#4、判断一个数是否为2的幂" class="headerlink" title="4、判断一个数是否为2的幂"></a><strong>4、判断一个数是否为2的幂</strong></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>num <span class="token operator">&amp;&amp;</span> num <span class="token operator">==</span> <span class="token function">lowbits</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// num不为0 &amp;&amp; num的二进制数只有一位1 </span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"是2的幂"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"不是2的幂"</span><span class="token punctuation">&#125;</span><span class="token comment">// 输出：是2的幂</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若<code>x == lowbits(x)</code>，说明<code>x</code>的最低为的<code>1</code>对应的十进制数也为<code>x</code>，说明<code>x</code>的二进制位只有一个<code>1</code>，符合2的幂的特点。<code>0</code>除外，因为<code>lowbits(0) = 0</code>，而<code>0</code>不是2的幂。</p><h3 id="（2）-（按位或）"><a href="#（2）-（按位或）" class="headerlink" title="（2）| （按位或）"></a>（2）| （按位或）</h3><h4 id="1、规则-1"><a href="#1、规则-1" class="headerlink" title="1、规则"></a>1、规则</h4><p>二进制相应位只要有一个为<code>1</code>则为<code>1</code>，否则为<code>0</code></p><p><strong>例如：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">100101</span>  <span class="token comment">// 37</span><span class="token number">101000</span>  <span class="token comment">// 40</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>  <span class="token comment">// | （按位或）</span><span class="token number">101101</span>  <span class="token comment">// 45</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、集合合并"><a href="#2、集合合并" class="headerlink" title="2、集合合并"></a>2、集合合并</h4><p>给定两个集合，合并这两个集合：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> A <span class="token operator">=</span> <span class="token number">0b10010</span><span class="token punctuation">;</span><span class="token keyword">int</span> B <span class="token operator">=</span> <span class="token number">0b10111</span><span class="token punctuation">;</span><span class="token keyword">int</span> cout <span class="token operator">&lt;&lt;</span> C<span class="token punctuation">;</span>  <span class="token comment">// 输出：10111</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 二进制 </tag>
            
            <tag> 位运算 </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索</title>
      <link href="/2025/05/04/search/"/>
      <url>/2025/05/04/search/</url>
      
        <content type="html"><![CDATA[<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p>搜索算法十分常见且重要，主要由深度优先搜索(Depth First Search，简称DFS)，广度优先搜索(Width Frist Search，简称BFS)，搜索回溯，记忆化搜索，A*算法等组成</p><h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>给你一个数 $n$，写出 $1, 2, 3,······, n$ 的全排列。<br>全排列：一串字符或数字的所有排列顺序<br>例如：1 2 3<br>全排列为： </p><pre class="line-numbers language-none"><code class="language-none">1 2 31 3 22 1 32 3 13 1 23 2 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并且按照字典序输出。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我们先不管 $n$ 的范围，直接考虑暴力求解，发现我们可以通过一种 “选数” 的方法选出我们要的答案，如图。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ STL</title>
      <link href="/2025/05/04/stl/"/>
      <url>/2025/05/04/stl/</url>
      
        <content type="html"><![CDATA[<h2 id="STL-的组成"><a href="#STL-的组成" class="headerlink" title="STL 的组成"></a>STL 的组成</h2><ul><li>容器 </li><li>算法</li><li>迭代器</li></ul><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><p>vector是一个动态数组，大小可变，经常替代C中的传统数组</p><h4 id="引入头文件"><a href="#引入头文件" class="headerlink" title="引入头文件"></a>引入头文件</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token comment">// 或者使用万能头文件，包含大多数头文件</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建vector数组"><a href="#创建vector数组" class="headerlink" title="创建vector数组"></a>创建vector数组</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>  <span class="token comment">// 创建大小为零的数组v</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建初始大小为10的字符串数组s</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建初始大小为100的布尔数组a</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">b</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 创建初始大小为100的数组b, 初始值都为-1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> STL </tag>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++基础模板</title>
      <link href="/2025/05/04/first/"/>
      <url>/2025/05/04/first/</url>
      
        <content type="html"><![CDATA[<h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello World!"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
